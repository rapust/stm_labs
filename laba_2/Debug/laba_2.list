
laba_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  08000414  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  08000414  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800041c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015f6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a7  00000000  00000000  0002162a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  00021dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e646  00000000  00000000  00021f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f98  00000000  00000000  000405a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb669  00000000  00000000  0004253e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdba7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d0  00000000  00000000  000fdbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003fc 	.word	0x080003fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003fc 	.word	0x080003fc

080001c8 <turn_off_leds>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turn_off_leds(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    GPIOD->ODR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <turn_off_leds+0x1c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <turn_off_leds+0x1c>)
 80001d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80001d6:	6153      	str	r3, [r2, #20]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40020c00 	.word	0x40020c00

080001e8 <turn_on_led>:

void turn_on_led(uint8_t led_index)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
    GPIOD->ODR |= (1 << (12 + led_index));
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <turn_on_led+0x2c>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	320c      	adds	r2, #12
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	4611      	mov	r1, r2
 8000202:	4a04      	ldr	r2, [pc, #16]	; (8000214 <turn_on_led+0x2c>)
 8000204:	430b      	orrs	r3, r1
 8000206:	6153      	str	r3, [r2, #20]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	40020c00 	.word	0x40020c00

08000218 <is_button_pressed>:

uint8_t is_button_pressed(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    return (GPIOA->IDR & GPIO_IDR_ID0) != 0;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <is_button_pressed+0x20>)
 800021e:	691b      	ldr	r3, [r3, #16]
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	bf14      	ite	ne
 8000228:	2301      	movne	r3, #1
 800022a:	2300      	moveq	r3, #0
 800022c:	b2db      	uxtb	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	40020000 	.word	0x40020000

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	uint32_t i;
	uint32_t j;

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000242:	4b1c      	ldr	r3, [pc, #112]	; (80002b4 <main+0x78>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	4a1b      	ldr	r2, [pc, #108]	; (80002b4 <main+0x78>)
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1 << (12 * 2)) | (1 << (13 * 2)) | (1 << (14 * 2)) | (1 << (15 * 2));
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x7c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <main+0x7c>)
 8000254:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000258:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(3 << (0 * 2));
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <main+0x80>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a17      	ldr	r2, [pc, #92]	; (80002bc <main+0x80>)
 8000260:	f023 0303 	bic.w	r3, r3, #3
 8000264:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER = 0;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x7c>)
 8000268:	2200      	movs	r2, #0
 800026a:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0x7c>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (is_button_pressed())
 8000272:	f7ff ffd1 	bl	8000218 <is_button_pressed>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0fa      	beq.n	8000272 <main+0x36>
	  {
		  for (i = 0; i < 4; i++)
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e014      	b.n	80002ac <main+0x70>
		  {
			  turn_off_leds();
 8000282:	f7ff ffa1 	bl	80001c8 <turn_off_leds>
			  turn_on_led(i);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffac 	bl	80001e8 <turn_on_led>
			  for (j = 0; j < 50000; j++);
 8000290:	2300      	movs	r3, #0
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	e002      	b.n	800029c <main+0x60>
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d9f7      	bls.n	8000296 <main+0x5a>
		  for (i = 0; i < 4; i++)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	d9e7      	bls.n	8000282 <main+0x46>
	  if (is_button_pressed())
 80002b2:	e7de      	b.n	8000272 <main+0x36>
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020c00 	.word	0x40020c00
 80002bc:	40020000 	.word	0x40020000

080002c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002c4:	e7fe      	b.n	80002c4 <NMI_Handler+0x4>

080002c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <HardFault_Handler+0x4>

080002cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler+0x4>

080002d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <BusFault_Handler+0x4>

080002d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <UsageFault_Handler+0x4>

080002de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030c:	f000 f83e 	bl	800038c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}

08000314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <SystemInit+0x20>)
 800031a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemInit+0x20>)
 8000320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800033e:	490e      	ldr	r1, [pc, #56]	; (8000378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000354:	4c0b      	ldr	r4, [pc, #44]	; (8000384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000362:	f7ff ffd7 	bl	8000314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000366:	f000 f825 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800036a:	f7ff ff67 	bl	800023c <main>
  bx  lr    
 800036e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800037c:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 8000380:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000384:	20000024 	.word	0x20000024

08000388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_IncTick+0x20>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_IncTick+0x24>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4413      	add	r3, r2
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <HAL_IncTick+0x24>)
 800039e:	6013      	str	r3, [r2, #0]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	20000020 	.word	0x20000020

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	; (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	; (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	; (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	; (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
